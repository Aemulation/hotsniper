--- parsec-2.1/pkgs/apps/blackscholes/src/blackscholes.c	2023-05-16 16:58:11.893814124 +0200
+++ parsec-2.1/pkgs/apps/blackscholes/src/blackscholes-patched.c	2023-05-16 16:57:53.369196193 +0200
@@ -11,6 +11,7 @@
 #include <stdlib.h>
 #include <math.h>
 #include <string.h>
+#include <unistd.h>
 
 #ifdef ENABLE_PARSEC_HOOKS
 #include <hooks.h>
@@ -43,6 +44,16 @@
 
 #define NUM_RUNS 100
 
+#include <heartbeats/heart_rate_monitor.h>
+#include <heartbeats/heartbeat-types.h>
+#include <heartbeats/heartbeat.h>
+
+#define PREFIX "BLACKSCHOLES"
+
+heartbeat_t *heart;
+heart_rate_monitor_t hrm;
+int enable_heartbeats;
+
 typedef struct OptionData_ {
         fptype s;          // spot price
         fptype strike;     // strike price
@@ -69,6 +80,49 @@
 int numError = 0;
 int nThreads;
 
+static inline void hb_init() {
+  float min_heartrate;
+  float max_heartrate;
+  int window_size;
+  char logfile[512];
+  memset(logfile, 0, sizeof(logfile));
+
+  if (getenv(PREFIX "_MIN_HEART_RATE") == NULL) {
+    min_heartrate = 0.0;
+  } else {
+    min_heartrate = atof(getenv(PREFIX "_MIN_HEART_RATE"));
+  }
+  if (getenv(PREFIX "_MAX_HEART_RATE") == NULL) {
+    max_heartrate = 100.0;
+  } else {
+    max_heartrate = atof(getenv(PREFIX "_MAX_HEART_RATE"));
+  }
+  if (getenv(PREFIX "_WINDOW_SIZE") == NULL) {
+    window_size = 30;
+  } else {
+    window_size = atoi(getenv(PREFIX "_WINDOW_SIZE"));
+  }
+  if (getenv(PREFIX "_HB_LOGFILE") != NULL) {
+    strcpy(logfile, getenv(PREFIX "_HB_LOGFILE"));
+  }
+
+  printf("init heartbeat with %f %f %d %s\n", min_heartrate, max_heartrate,
+         window_size, (logfile[0] == '\0') ? NULL : logfile);
+  heart =
+      heartbeat_init(window_size, 1, (logfile[0] == '\0') ? NULL : logfile,
+                     min_heartrate, max_heartrate);
+  if (heart == NULL) {
+    fprintf(stderr, "Failed to init heartbeat.\n");
+    exit(1);
+  }
+  printf("heartbeat init'd\n");
+}
+
+static inline void hb_finish() {
+  heartbeat_finish(heart);
+  printf("heartbeat finished\n");
+}
+
 ////////////////////////////////////////////////////////////////////////////////
 ////////////////////////////////////////////////////////////////////////////////
 ///////////////////////////////////////////////////////////////////////////////
@@ -231,6 +285,11 @@
     int end = start + (numOptions / nThreads);
 
     for (j=0; j<NUM_RUNS; j++) {
+
+    if (enable_heartbeats == 1) {
+      heartbeat(heart, j);  // TODO - This is different from PARSEC-3.0 impl.
+    }
+
 #ifdef ENABLE_OPENMP
 #pragma omp parallel for private(i, price, priceDelta)
         for (i=0; i<numOptions; i++) {
@@ -268,6 +327,13 @@
     int * buffer2;
     int rv;
 
+    if (getenv("ENABLE_HEARTBEATS") != NULL) {
+      enable_heartbeats = 1;
+      hb_init();
+    } else {
+      enable_heartbeats = 0;
+    }
+
 #ifdef PARSEC_VERSION
 #define __PARSEC_STRING(x) #x
 #define __PARSEC_XSTRING(x) __PARSEC_STRING(x)
@@ -438,6 +504,10 @@
     __parsec_bench_end();
 #endif
 
+    if (enable_heartbeats == 1) {
+      hb_finish();
+    }
+
     return 0;
 }
 
--- parsec-2.1/pkgs/apps/x264/src/x264.c	2023-05-16 17:03:06.278735908 +0200
+++ parsec-2.1/pkgs/apps/x264/src/x264-patched.c	2023-05-16 17:02:12.041858258 +0200
@@ -47,6 +47,16 @@
 #include <hooks.h>
 #endif
 
+#include <heartbeats/heart_rate_monitor.h>
+#include <heartbeats/heartbeat-types.h>
+#include <heartbeats/heartbeat.h>
+
+#define PREFIX "X264"
+
+heartbeat_t *heart;
+heart_rate_monitor_t hrm;
+int enable_heartbeats;
+
 uint8_t *mux_buffer = NULL;
 int mux_buffer_size = 0;
 
@@ -85,6 +95,61 @@
 static int  Parse( int argc, char **argv, x264_param_t *param, cli_opt_t *opt );
 static int  Encode( x264_param_t *param, cli_opt_t *opt );
 
+static inline void hb_init()
+{
+    float min_heartrate;
+    float max_heartrate;
+    int window_size;
+    char logfile[512];
+    memset(logfile, 0, sizeof(logfile));
+
+    if (getenv(PREFIX "_MIN_HEART_RATE") == NULL)
+    {
+        min_heartrate = 0.0;
+    }
+    else
+    {
+        min_heartrate = atof(getenv(PREFIX "_MIN_HEART_RATE"));
+    }
+    if (getenv(PREFIX "_MAX_HEART_RATE") == NULL)
+    {
+        max_heartrate = 100.0;
+    }
+    else
+    {
+        max_heartrate = atof(getenv(PREFIX "_MAX_HEART_RATE"));
+    }
+    if (getenv(PREFIX "_WINDOW_SIZE") == NULL)
+    {
+        window_size = 30;
+    }
+    else
+    {
+        window_size = atoi(getenv(PREFIX "_WINDOW_SIZE"));
+    }
+    if (getenv(PREFIX "_HB_LOGFILE") != NULL)
+    {
+        strcpy(logfile, getenv(PREFIX "_HB_LOGFILE"));
+    }
+
+    printf("init heartbeat with %f %f %d %s\n", min_heartrate, max_heartrate,
+           window_size, (logfile[0] == '\0') ? NULL : logfile);
+    heart =
+        heartbeat_init(window_size, 1, (logfile[0] == '\0') ? NULL : logfile,
+                       min_heartrate, max_heartrate);
+    if (heart == NULL)
+    {
+        fprintf(stderr, "Failed to init heartbeat.\n");
+        exit(1);
+    }
+    printf("heartbeat init'd\n");
+}
+
+static inline void hb_finish()
+{
+    heartbeat_finish(heart);
+    printf("heartbeat finished\n");
+}
 
 /****************************************************************************
  * main:
@@ -95,6 +160,16 @@
     cli_opt_t opt;
     int ret;
 
+    if (getenv("ENABLE_HEARTBEATS") != NULL)
+    {
+        enable_heartbeats = 1;
+        hb_init();
+    }
+    else
+    {
+        enable_heartbeats = 0;
+    }
+
 #ifdef PARSEC_VERSION
 #define __PARSEC_STRING(x) #x
 #define __PARSEC_XSTRING(x) __PARSEC_STRING(x)
@@ -138,6 +213,11 @@
     __parsec_bench_end();
 #endif
 
+    if (enable_heartbeats == 1)
+    {
+        hb_finish();
+    }
+
     return ret;
 }
 
@@ -873,6 +953,11 @@
 
         i_frame++;
 
+        if (enable_heartbeats == 1)
+        {
+            heartbeat(heart, i_frame);
+        }
+
         /* update status line (up to 1000 times per input file) */
         if( opt->b_progress && i_frame % i_update_interval == 0 )
         {
--- parsec-2.1/pkgs/apps/bodytrack/src/TrackingBenchmark/main.cpp	2023-05-16 17:05:18.501999749 +0200
+++ parsec-2.1/pkgs/apps/bodytrack/src/TrackingBenchmark/main-patched.cpp	2023-05-16 17:05:25.442856119 +0200
@@ -65,8 +65,74 @@
 #include "TrackingModel.h"
 #include "system.h"
 
+#include <heartbeats/heart_rate_monitor.h>
+#include <heartbeats/heartbeat-types.h>
+#include <heartbeats/heartbeat.h>
+
+#define PREFIX "BODYTRACK"
+
+heartbeat_t *heart;
+heart_rate_monitor_t hrm;
+int enable_heartbeats;
+
 using namespace std;
 
+static inline void hb_init()
+{
+	float min_heartrate;
+	float max_heartrate;
+	int window_size;
+	char logfile[512];
+	memset(logfile, 0, sizeof(logfile));
+
+	if (getenv(PREFIX "_MIN_HEART_RATE") == NULL)
+	{
+		min_heartrate = 0.0;
+	}
+	else
+	{
+		min_heartrate = atof(getenv(PREFIX "_MIN_HEART_RATE"));
+	}
+	if (getenv(PREFIX "_MAX_HEART_RATE") == NULL)
+	{
+		max_heartrate = 100.0;
+	}
+	else
+	{
+		max_heartrate = atof(getenv(PREFIX "_MAX_HEART_RATE"));
+	}
+	if (getenv(PREFIX "_WINDOW_SIZE") == NULL)
+	{
+		window_size = 30;
+	}
+	else
+	{
+		window_size = atoi(getenv(PREFIX "_WINDOW_SIZE"));
+	}
+	if (getenv(PREFIX "_HB_LOGFILE") != NULL)
+	{
+		strcpy(logfile, getenv(PREFIX "_HB_LOGFILE"));
+	}
+
+	printf("init heartbeat with %f %f %d %s\n", min_heartrate, max_heartrate,
+				 window_size, (logfile[0] == '\0') ? NULL : logfile);
+	heart =
+			heartbeat_init(window_size, 1, (logfile[0] == '\0') ? NULL : logfile,
+										 min_heartrate, max_heartrate);
+	if (heart == NULL)
+	{
+		fprintf(stderr, "Failed to init heartbeat.\n");
+		exit(1);
+	}
+	printf("heartbeat init'd\n");
+}
+
+static inline void hb_finish()
+{
+	heartbeat_finish(heart);
+	printf("heartbeat finished\n");
+}
+
 //templated conversion from string
 template<class T>
 bool num(const string s, T &n)
@@ -189,7 +255,13 @@
         __parsec_roi_begin();
 #endif
 	for(int i = 0; i < frames; i++)														//process each set of frames
-	{	cout << "Processing frame " << i << endl;
+	{
+		if (enable_heartbeats == 1)
+		{
+			heartbeat(heart, i);
+		}
+
+		cout << "Processing frame " << i << endl;
 		if(!pf.Update((float)i))														//Run particle filter step
 		{	cout << "Error loading observation data" << endl;
 			return 0;
@@ -250,7 +322,13 @@
         __parsec_roi_begin();
 #endif
 	for(int i = 0; i < frames; i++)														//process each set of frames
-	{	cout << "Processing frame " << i << endl;
+	{	
+		if (enable_heartbeats == 1)
+		{
+			heartbeat(heart, i);
+		}
+
+		cout << "Processing frame " << i << endl;
 		if(!pf.Update((float)i))														//Run particle filter step
 		{	cout << "Error loading observation data" << endl;
 			workers.JoinAll();
@@ -347,7 +425,13 @@
         __parsec_roi_begin();
 #endif
 	for(int i = 0; i < frames; i++)														//process each set of frames
-	{	cout << "Processing frame " << i << endl;
+	{	
+		if (enable_heartbeats == 1)
+		{
+			heartbeat(heart, i);
+		}
+
+		cout << "Processing frame " << i << endl;
 		if(!pf.Update((float)i))														//Run particle filter step
 		{	cout << "Error loading observation data" << endl;
 			return 0;
@@ -370,6 +454,16 @@
 	bool OutputBMP;
 	int cameras, frames, particles, layers, threads, threadModel;								//process command line parameters to get path, cameras, and frames
 
+	if (getenv("ENABLE_HEARTBEATS") != NULL)
+	{
+		enable_heartbeats = 1;
+		hb_init();
+	}
+	else
+	{
+		enable_heartbeats = 0;
+	}
+
 #ifdef PARSEC_VERSION
 #define __PARSEC_STRING(x) #x
 #define __PARSEC_XSTRING(x) __PARSEC_STRING(x)
@@ -448,6 +542,11 @@
 			break;
 	}
 
+	if (enable_heartbeats == 1)
+	{
+			hb_finish();
+	}
+
 #if defined(ENABLE_PARSEC_HOOKS)
         __parsec_bench_end();
 #endif
--- parsec-2.1/pkgs/kernels/dedup/src/dedup.c	2023-05-17 10:14:21.320253860 +0200
+++ parsec-2.1/pkgs/kernels/dedup/src/dedup-patched.c	2023-05-17 10:14:30.513064541 +0200
@@ -15,8 +15,64 @@
 #include <hooks.h>
 #endif
 
+#include <heartbeats/heart_rate_monitor.h>
+#include <heartbeats/heartbeat-types.h>
+#include <heartbeats/heartbeat.h>
+
+#define PREFIX "DEDUP"
+
+heartbeat_t *heart;
+heart_rate_monitor_t hrm;
+int enable_heartbeats;
+
 config * conf;
 
+
+static inline void hb_init() {
+  float min_heartrate;
+  float max_heartrate;
+  int window_size;
+  char logfile[512];
+  memset(logfile, 0, sizeof(logfile));
+
+  if (getenv(PREFIX "_MIN_HEART_RATE") == NULL) {
+    min_heartrate = 0.0;
+  } else {
+    min_heartrate = atof(getenv(PREFIX "_MIN_HEART_RATE"));
+  }
+  if (getenv(PREFIX "_MAX_HEART_RATE") == NULL) {
+    max_heartrate = 100.0;
+  } else {
+    max_heartrate = atof(getenv(PREFIX "_MAX_HEART_RATE"));
+  }
+  if (getenv(PREFIX "_WINDOW_SIZE") == NULL) {
+    window_size = 30;
+  } else {
+    window_size = atoi(getenv(PREFIX "_WINDOW_SIZE"));
+  }
+  if (getenv(PREFIX "_HB_LOGFILE") != NULL) {
+    strcpy(logfile, getenv(PREFIX "_HB_LOGFILE"));
+  }
+
+  printf("init heartbeat with %f %f %d %s\n", min_heartrate, max_heartrate,
+         window_size, (logfile[0] == '\0') ? NULL : logfile);
+  heart =
+      heartbeat_init(window_size, 1, (logfile[0] == '\0') ? NULL : logfile,
+                     min_heartrate, max_heartrate);
+  if (heart == NULL) {
+    fprintf(stderr, "Failed to init heartbeat.\n");
+    exit(1);
+  }
+  printf("heartbeat init'd\n");
+}
+
+
+static inline void hb_finish() {
+  heartbeat_finish(heart);
+  printf("heartbeat finished\n");
+}
+
+
 static int
 keys_equal_fn ( void *key1, void *key2 ){
   return (memcmp(((CacheKey*)key1)->sha1name, ((CacheKey*)key2)->sha1name, SHA1_LEN) == 0);
@@ -127,15 +183,26 @@
     exit(1);
   }
 
+  if (getenv("ENABLE_HEARTBEATS") != NULL) {
+    enable_heartbeats = 1;
+    hb_init();
+  } else {
+    enable_heartbeats = 0;
+  }
+
   if (compress) {
     Encode(conf);
   } else {
     Decode(conf);
   }
 
+  if (enable_heartbeats == 1) {
+    hb_finish();
+  }
+
 #ifdef ENABLE_PARSEC_HOOKS
   __parsec_bench_end();
 #endif
 
   return 0;
-}
\ No newline at end of file
+}
--- parsec-2.1/pkgs/kernels/dedup/src/encoder.c	2023-05-17 10:15:12.532199186 +0200
+++ parsec-2.1/pkgs/kernels/dedup/src/encoder-patched.c	2023-05-17 10:33:06.184331223 +0200
@@ -23,6 +23,10 @@
 
 #define INITIAL_SIZE 4096
 
+#include <heartbeats/heartbeat.h>
+extern heartbeat_t* heart;
+extern int enable_heartbeats;
+
 extern config * conf;
 
 /*
@@ -336,6 +340,10 @@
 
     if (chunk.start == NULL) break;
 
+    if (enable_heartbeats == 1) {
+      heartbeat(heart, fetch_start); // TODO - Maybe anchorid or cid instead?
+    }
+
     item = sub_ChunkProcess(chunk);
 
     if (item->type == TYPE_COMPRESS) {
